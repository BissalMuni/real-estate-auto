name: Update Real Estate Data

on:
  push:
    paths: 
      - 'data/*.csv'
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

permissions:
  contents: write
  actions: read

# 동시 실행 방지 (핵심 해결책)
concurrency:
  group: real-estate-update
  cancel-in-progress: false

jobs:
  update-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm init -y --force
        npm install papaparse
        
    - name: Process CSV files
      run: |
        if [ ! -f "scripts/process-csv.js" ]; then
          echo "Creating process-csv.js..."
          mkdir -p scripts
          cat > scripts/process-csv.js << 'EOF'
        const fs = require('fs');
        const path = require('path');
        const Papa = require('papaparse');
        
        // CSV 파일들 찾기
        const dataDir = './data';
        let allData = [];
        let fileStats = [];
        
        if (fs.existsSync(dataDir)) {
          const csvFiles = fs.readdirSync(dataDir)
            .filter(file => file.endsWith('.csv'))
            .sort();
          
          console.log(`발견된 CSV 파일: ${csvFiles.length}개`);
          
          csvFiles.forEach(file => {
            console.log(`처리 중: ${file}`);
            const filePath = path.join(dataDir, file);
            const csvContent = fs.readFileSync(filePath, 'utf8');
            
            const parsed = Papa.parse(csvContent, {
              header: true,
              skipEmptyLines: true,
              dynamicTyping: true
            });
            
            const dataWithSource = parsed.data.map(row => ({
              ...row,
              소스파일: file,
              처리일시: new Date().toLocaleString('ko-KR')
            }));
            
            allData = allData.concat(dataWithSource);
            fileStats.push({
              파일명: file,
              행수: parsed.data.length,
              처리시간: new Date().toLocaleString('ko-KR')
            });
          });
        }
        
        // HTML 생성
        const totalCount = allData.length;
        const avgPrice = totalCount > 0 ? 
          allData.reduce((sum, row) => {
            const price = parseFloat(row['네이버_매매가_숫자']) || 0;
            return sum + price;
          }, 0) / totalCount : 0;
        
        const uniqueLocations = new Set(allData.map(row => 
          row['네이버_시도'] && row['네이버_시군구'] ? 
          `${row['네이버_시도']} ${row['네이버_시군구']}` : '알 수 없음'
        )).size;
        
        let dataTableHTML = '';
        if (totalCount > 0) {
          const headers = Object.keys(allData[0]);
          dataTableHTML = `
            <h2>📊 처리된 데이터</h2>
            <div style="overflow-x: auto; max-height: 400px; border: 1px solid #ddd; border-radius: 8px;">
              <table style="width: 100%; border-collapse: collapse;">
                <thead style="background: #f8f9fa; position: sticky; top: 0;">
                  <tr>
                    ${headers.map(header => `<th style="border: 1px solid #ddd; padding: 8px; text-align: left; font-size: 12px;">${header}</th>`).join('')}
                  </tr>
                </thead>
                <tbody>
                  ${allData.slice(0, 50).map(row => `
                    <tr>
                      ${headers.map(header => {
                        let value = row[header] || '';
                        if (header.includes('매매가') && typeof value === 'number') {
                          value = `<span style="color: #e74c3c; font-weight: bold;">${value.toLocaleString()}</span>`;
                        }
                        return `<td style="border: 1px solid #ddd; padding: 6px; font-size: 11px;">${value}</td>`;
                      }).join('')}
                    </tr>
                  `).join('')}
                  ${allData.length > 50 ? `<tr><td colspan="${headers.length}" style="text-align: center; padding: 10px; font-style: italic;">... 외 ${allData.length - 50}개 행</td></tr>` : ''}
                </tbody>
              </table>
            </div>
          `;
        }
        
        const html = `<!DOCTYPE html>
        <html lang="ko">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>부동산 데이터 대시보드</title>
            <style>
                body { 
                    font-family: 'Segoe UI', Arial, sans-serif; 
                    margin: 0;
                    padding: 20px;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                }
                .container {
                    background: white;
                    border-radius: 20px;
                    padding: 30px;
                    max-width: 1200px;
                    margin: 0 auto;
                    box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                }
                h1 { 
                    color: #667eea; 
                    text-align: center;
                    margin-bottom: 30px;
                    font-size: 2.5em;
                }
                h2 {
                    color: #764ba2;
                    margin: 30px 0 15px 0;
                }
                .stats-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                    gap: 20px;
                    margin: 30px 0;
                }
                .stat-card {
                    background: linear-gradient(45deg, #667eea, #764ba2);
                    color: white;
                    padding: 20px;
                    border-radius: 15px;
                    text-align: center;
                }
                .stat-card h3 {
                    font-size: 2em;
                    margin-bottom: 10px;
                }
                .update-info {
                    background: #f8f9fa;
                    padding: 20px;
                    border-radius: 10px;
                    margin: 20px 0;
                    text-align: center;
                }
                .file-info {
                    background: #e9ecef;
                    padding: 15px;
                    border-radius: 8px;
                    margin: 15px 0;
                }
                table { font-size: 12px; }
                @media (max-width: 768px) {
                    .container { padding: 15px; margin: 10px; }
                    h1 { font-size: 2em; }
                    .stats-grid { grid-template-columns: 1fr; }
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>🏠 부동산 데이터 대시보드</h1>
                
                <div class="update-info">
                    <strong>🕐 최종 업데이트:</strong> ${new Date().toLocaleString('ko-KR')}
                    <br><strong>🤖 자동화 시스템:</strong> 정상 작동 중
                </div>
                
                <div class="stats-grid">
                    <div class="stat-card">
                        <h3>${totalCount.toLocaleString()}</h3>
                        <p>총 매물 수</p>
                    </div>
                    <div class="stat-card">
                        <h3>${Math.round(avgPrice).toLocaleString()}</h3>
                        <p>평균 매매가 (만원)</p>
                    </div>
                    <div class="stat-card">
                        <h3>${fileStats.length}</h3>
                        <p>처리된 파일 수</p>
                    </div>
                    <div class="stat-card">
                        <h3>${uniqueLocations}</h3>
                        <p>고유 지역 수</p>
                    </div>
                </div>
                
                ${fileStats.length > 0 ? `
                <h2>📁 파일 처리 현황</h2>
                <div class="file-info">
                    ${fileStats.map(stat => 
                      `<div><strong>${stat.파일명}:</strong> ${stat.행수}개 행 (${stat.처리시간})</div>`
                    ).join('')}
                </div>
                ` : ''}
                
                ${dataTableHTML}
                
                <div style="text-align: center; margin-top: 40px; padding: 20px; color: #6c757d; border-top: 1px solid #dee2e6;">
                    <p>🚀 GitHub Actions & Netlify 자동 배포 시스템</p>
                    <p>CSV 파일을 data/ 폴더에 업로드하면 자동으로 처리됩니다.</p>
                </div>
            </div>
        </body>
        </html>`;
        
        fs.writeFileSync('./index.html', html, 'utf8');
        console.log(`HTML 파일 생성 완료 (총 ${totalCount}개 행 처리)`);
        EOF
        fi
        node scripts/process-csv.js
        
    - name: Sync with remote and commit
      run: |
        # Git 설정
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 원격 저장소와 동기화
        echo "원격 저장소 동기화 중..."
        git fetch origin main
        git reset --hard origin/main
        
        # 다시 CSV 처리 (동기화 후 최신 데이터로)
        node scripts/process-csv.js
        
        # 변경사항 확인 및 커밋
        git add index.html
        if git diff --staged --quiet; then
          echo "변경사항이 없습니다"
        else
          echo "변경사항 커밋 중..."
          git commit -m "Auto-update: $(date '+%Y-%m-%d %H:%M:%S')"
          
          # 안전한 푸시 (재시도 로직 포함)
          for i in {1..3}; do
            echo "푸시 시도 ${i}/3..."
            if git push origin main; then
              echo "푸시 성공!"
              break
            else
              echo "푸시 실패, 재동기화 후 재시도..."
              git fetch origin main
              git rebase origin/main
              sleep 2
            fi
            
            if [ $i -eq 3 ]; then
              echo "최종 푸시 시도 실패, 강제 푸시 사용"
              git push origin main --force-with-lease
            fi
          done
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
